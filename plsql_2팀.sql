SELECT USER
FROM DUAL;
--==>> TEAM2


-- 교수 INSERT 프로시저=========================================================
CREATE OR REPLACE PROCEDURE PRC_PROFESSOR_INSERT
( V_PROFESSOR_ID   IN TBL_PRO.PROFESSOR_ID%TYPE
, V_PROFESSOR_NAME IN TBL_PRO.PROFESSOR_NAME%TYPE
, V_PROFESSOR_SSN  IN TBL_PRO.PROFESSOR_SSN%TYPE
)
IS
    V_PROFESSOR_PW TBL_PRO.PROFESSOR_PW%TYPE;
BEGIN
    
    V_PROFESSOR_PW := V_PROFESSOR_SSN;
    
    INSERT INTO TBL_PRO(PROFESSOR_ID, PROFESSOR_PW, PROFESSOR_NAME, PROFESSOR_SSN, PROFESSOR_JOIN)
    VALUES(V_PROFESSOR_ID, V_PROFESSOR_PW, V_PROFESSOR_NAME, V_PROFESSOR_SSN, SYSDATE);
    
    COMMIT;
END;
--==>> Procedure PRC_PROFESSOR_INSERT이(가) 컴파일되었습니다.

--==============================================================================

-- 학생 INSERT 프로시저
CREATE OR REPLACE PROCEDURE PRC_STUDENT_INSERT
( V_STUDENT_ID   IN TBL_STUDENT.STUDENT_ID%TYPE
, V_STUDENT_NAME IN TBL_STUDENT.STUDENT_NAME%TYPE
, V_STUDENT_SSN  IN TBL_STUDENT.STUDENT_SSN%TYPE
)
IS
    V_STUDENT_PW TBL_STUDENT.STUDENT_PW%TYPE;
BEGIN

    V_STUDENT_PW := V_STUDENT_SSN;
    
    INSERT INTO TBL_STUDENT(STUDENT_ID, STUDENT_PW, STUDENT_NAME, STUDENT_SSN, STUDENT_JOIN)
    VALUES(V_STUDENT_ID, V_STUDENT_PW, V_STUDENT_NAME, V_STUDENT_SSN, SYSDATE);
END;
--==>> Procedure PRC_STUDENT_INSERT이(가) 컴파일되었습니다.

--==============================================================================


SET SERVEROUTPUT ON;

--==============================================================================

-- 관리자 로그인 프로시저
CREATE OR REPLACE PROCEDURE PRC_ADMIN_LOGIN
( V_USERID  IN TBL_ADMIN.ADMIN_ID%TYPE
, V_USERPW  IN TBL_ADMIN.ADMIN_PW%TYPE
)
IS
    V_COUNT  NUMBER;
BEGIN
    
    SELECT COUNT(ADMIN_ID) INTO V_COUNT
    FROM TBL_ADMIN
    WHERE ADMIN_ID = V_USERID AND ADMIN_PW = V_USERPW;
    
    IF (V_COUNT > 0 )
        THEN DBMS_OUTPUT.PUT_LINE(V_USERID || '님 로그인 성공.');
    ELSE 
             DBMS_OUTPUT.PUT_LINE('로그인 실패. 아이디와 패스워드를 확인해주세요.');
    END IF;
END;
--==> Procedure PRC_ADMIN_LOGIN이(가) 컴파일되었습니다.

--==============================================================================

-- 교수자 로그인 프로시저
CREATE OR REPLACE PROCEDURE PRC_PROFESSOR_LOGIN
( V_USERID  IN TBL_PRO.PROFESSOR_ID%TYPE
, V_USERPW  IN TBL_PRO.PROFESSOR_PW%TYPE
)
IS
    V_COUNT  NUMBER;
BEGIN
    
    SELECT COUNT(PROFESSOR_ID) INTO V_COUNT
    FROM TBL_PRO
    WHERE PROFESSOR_ID = V_USERID AND PROFESSOR_PW = V_USERPW;
    
    IF (V_COUNT > 0 )
        THEN DBMS_OUTPUT.PUT_LINE(V_USERID || '님 로그인 성공.');
    ELSE 
             DBMS_OUTPUT.PUT_LINE('로그인 실패. 아이디와 패스워드를 확인해주세요.');
    END IF;
END;
--==>> Procedure PRC_PROFESSOR_LOGIN이(가) 컴파일되었습니다.


--==============================================================================
-- 학생 로그인 프로시저
CREATE OR REPLACE PROCEDURE PRC_STUDENT_LOGIN
( V_USERID  IN TBL_STUDENT.STUDENT_ID%TYPE
, V_USERPW  IN TBL_STUDENT.STUDENT_PW%TYPE
)
IS
    V_COUNT  NUMBER;
BEGIN
    
    SELECT COUNT(STUDENT_ID) INTO V_COUNT
    FROM TBL_STUDENT
    WHERE STUDENT_ID = V_USERID AND STUDENT_PW = V_USERPW;
    
    IF (V_COUNT > 0 )
        THEN DBMS_OUTPUT.PUT_LINE(V_USERID || '님 로그인 성공.');
    ELSE 
             DBMS_OUTPUT.PUT_LINE('로그인 실패. 아이디와 패스워드를 확인해주세요.');
    END IF;
END;
--==>> Procedure PRC_STUDENT_LOGIN이(가) 컴파일되었습니다.

--==============================================================================

-- 로그인 프로시저
CREATE OR REPLACE PROCEDURE PRC_LOGIN
( V_USER IN NUMBER
, V_USERID IN TBL_ADMIN.ADMIN_ID%TYPE
, V_USERPW IN TBL_ADMIN.ADMIN_PW%TYPE
)
IS
    USER_ERROR EXCEPTION;
    ID_PW_ERROR EXCEPTION;
BEGIN
    
    IF (V_USER = 1 ) -- 관리자
        THEN PRC_ADMIN_LOGIN(V_USERID, V_USERPW);
    ELSIF (V_USER = 2) -- 교수자
        THEN PRC_PROFESSOR_LOGIN(V_USERID, V_USERPW);
    ELSIF (V_USER = 3) -- 학생
        THEN PRC_STUDENT_LOGIN(V_USERID, V_USERPW);
    ELSIF ( V_USER != 1 AND V_USER != 2 AND V_USER != 3 )
        THEN RAISE USER_ERROR;
    ELSE
        RAISE ID_PW_ERROR;
    END IF;
    
    EXCEPTION
    WHEN USER_ERROR
        THEN RAISE_APPLICATION_ERROR(-20001, '사용자 선택 오류.');
             ROLLBACK;
    WHEN ID_PW_ERROR
        THEN RAISE_APPLICATION_ERROR(-20002, 'ID / PW 입력 오류.');
             ROLLBACK;
    WHEN OTHERS
        THEN ROLLBACK;
    
END;
--==>> Procedure PRC_LOGIN이(가) 컴파일되었습니다.
--==============================================================================

-- 학생 UPDATE 프로시저
CREATE OR REPLACE PROCEDURE PRC_STUDENT_UPDATE
( V_STUDENT_ID   IN TBL_STUDENT.STUDENT_ID%TYPE
, V_STUDENT_NAME IN TBL_STUDENT.STUDENT_NAME%TYPE
, V_STUDENT_PW   IN TBL_STUDENT.STUDENT_PW%TYPE
)
IS
    --예외추가
    USER_DEFINE_ERROR EXCEPTION;
    V_COUNT           NUMBER;
BEGIN
    SELECT COUNT(STUDENT_ID) INTO V_COUNT
    FROM TBL_STUDENT
    WHERE STUDENT_ID = V_STUDENT_ID;
    
    IF(V_COUNT = 0)
        THEN RAISE USER_DEFINE_ERROR;
    END IF;
    
    UPDATE TBL_STUDENT
    SET STUDENT_NAME = V_STUDENT_NAME, STUDENT_PW = V_STUDENT_PW
    WHERE STUDENT_ID = V_STUDENT_ID;
    
    COMMIT; 
    
    EXCEPTION
    WHEN USER_DEFINE_ERROR
        THEN RAISE_APPLICATION_ERROR(-20003, '조회되는 ID가 없습니다.');
             ROLLBACK;
        WHEN OTHERS
             THEN ROLLBACK;
END;

--==>> Procedure PRC_STUDENT_UPDATE이(가) 컴파일되었습니다.

--==============================================================================
-- 학생 DELETE 프로시저
CREATE OR REPLACE PROCEDURE PRC_STUDENT_DELETE
( V_STUDENT_ID  IN TBL_STUDENT.STUDENT_ID%TYPE
)
IS
    USER_DEFINE_ERROR EXCEPTION;
    V_COUNT           NUMBER;
BEGIN
    
    SELECT COUNT(STUDENT_ID) INTO V_COUNT
    FROM TBL_STUDENT
    WHERE STUDENT_ID = V_STUDENT_ID;
    
    IF(V_COUNT = 0)
        THEN RAISE USER_DEFINE_ERROR;
    END IF;
    
    
    DELETE FROM TBL_STUDENT
    WHERE STUDENT_ID = V_STUDENT_ID;
    
    COMMIT;
    
    EXCEPTION
    WHEN USER_DEFINE_ERROR
        THEN RAISE_APPLICATION_ERROR(-20003, '조회되는 ID가 없습니다.');
             ROLLBACK;
        WHEN OTHERS
             THEN ROLLBACK;
END;

--==>> Procedure PRC_STUDENT_DELETE이(가) 컴파일되었습니다.

--==============================================================================

-- 교수 UPDATE 프로시저
CREATE OR REPLACE PROCEDURE PRC_RPO_UPDATE
( V_PROFESSOR_ID   IN TBL_PRO.PROFESSOR_ID%TYPE
, V_PROFESSOR_NAME IN TBL_PRO.PROFESSOR_NAME%TYPE
, V_PROFESSOR_PW   IN TBL_PRO.PROFESSOR_PW%TYPE
)
IS
    --예외추가
    USER_DEFINE_ERROR EXCEPTION;
    V_COUNT           NUMBER;
BEGIN
    
    SELECT COUNT(PROFESSOR_ID) INTO V_COUNT
    FROM TBL_PRO
    WHERE PROFESSOR_ID = V_PROFESSOR_ID;
    
    IF(V_COUNT = 0)
        THEN RAISE USER_DEFINE_ERROR;
    END IF;
    
    UPDATE TBL_PRO
    SET PROFESSOR_NAME = V_PROFESSOR_NAME, PROFESSOR_PW = V_PROFESSOR_PW
    WHERE PROFESSOR_ID = V_PROFESSOR_ID;
    
    COMMIT; 
    
    EXCEPTION
    WHEN USER_DEFINE_ERROR
        THEN RAISE_APPLICATION_ERROR(-20003, '조회되는 ID가 없습니다.');
             ROLLBACK;
        WHEN OTHERS
             THEN ROLLBACK;
END;
--==>> Procedure PRC_PRO_UPDATE이(가) 컴파일되었습니다.

--==============================================================================
-- 교수 DELETE 프로시저
CREATE OR REPLACE PROCEDURE PRC_PRO_DELETE
( V_PROFESSOR_ID  IN TBL_PRO.PROFESSOR_ID%TYPE
)
IS
    USER_DEFINE_ERROR EXCEPTION;
    V_COUNT           NUMBER;
BEGIN
    
    SELECT COUNT(PROFESSOR_ID) INTO V_COUNT
    FROM TBL_PRO
    WHERE PROFESSOR_ID = V_PROFESSOR_ID;
    
    IF(V_COUNT = 0)
        THEN RAISE USER_DEFINE_ERROR;
    END IF;
    
    DELETE FROM TBL_PRO
    WHERE PROFESSOR_ID = V_PROFESSOR_ID;
    
    COMMIT;
    
    EXCEPTION
    WHEN USER_DEFINE_ERROR
        THEN RAISE_APPLICATION_ERROR(-20003, '조회되는 ID가 없습니다.');
             ROLLBACK;
        WHEN OTHERS
             THEN ROLLBACK;
END;

--==>> Procedure PRC_PRO_DELETE이(가) 컴파일되었습니다.
--==============================================================================


 
--성적 입력 (교수)

 CREATE OR REPLACE PROCEDURE PRC_SCORE_INSERT
( V_STUDENT_ID      IN TBL_STUDENT.STUDENT_ID%TYPE
, V_SUBJECT_NAME    IN TBL_SUBJECT.SUBJECT_NAME%TYPE
, V_GRADE_SILGI     IN TBL_GRADE.GRADE_SILGI%TYPE
, V_GRADE_PILGI     IN TBL_GRADE.GRADE_PILGI%TYPE
, V_GRADE_CHUL      IN TBL_GRADE.GRADE_CHUL%TYPE
, V_GRADE_DATE      IN TBL_GRADE.GRADE_DATE%TYPE
, V_PRO_ID          IN TBL_PRO.PROFESSOR_ID%TYPE
)
IS
    -- 과목코드 V
    V_GRADE_CODE    TBL_GRADE.GRADE_CODE%TYPE;
    V_SUBJECT_CODE  TBL_SUBJECT.SUBJECT_CODE%TYPE;
    V_COUNT         NUMBER;
    V_NUM           NUMBER;
    V_SOP_CODE      TBL_SOPEN.SOP_CODE%TYPE;
    V_REGIST_CODE   TBL_REGIST.REGIST_CODE%TYPE;
    
    -- 중도탈락 예외처리 변수
    FAIL_ERROR EXCEPTION;
BEGIN
    -- SELECT V _과목코드
    
    SELECT COUNT(*) INTO V_COUNT
    FROM TBL_FAIL FA
        JOIN TBL_REGIST RG
        ON FA.REGIST_CODE = RG.REGIST_CODE
    WHERE RG.STUDENT_ID = V_STUDENT_ID;
    
    IF (V_COUNT >0)
        THEN RAISE FAIL_ERROR;
    END IF;
    
    SELECT MAX(TO_NUMBER(SUBSTR(GRADE_CODE,6)))+1 INTO V_NUM
    FROM TBL_GRADE;
    
    V_GRADE_CODE := 'GRADE' || TO_CHAR(V_NUM);
    
    SELECT SOP_CODE INTO V_SOP_CODE
    FROM TBL_SOPEN SO JOIN TBL_SUBJECT SJ
        ON SO.SUBJECT_CODE = SJ.SUBJECT_CODE
        WHERE SJ.SUBJECT_NAME = V_SUBJECT_NAME                 
        AND SO.PROFESSOR_ID = V_PRO_ID;
    
    SELECT REGIST_CODE INTO V_REGIST_CODE
    FROM TBL_REGIST RG
        JOIN TBL_STUDENT SD
        ON RG.STUDENT_ID = SD.STUDENT_ID
    WHERE SD.STUDENT_ID = V_STUDENT_ID;
    
    -- SELECT V_과목코드
    INSERT INTO TBL_GRADE(GRADE_CODE, GRADE_SILGI, GRADE_PILGI, GRADE_CHUL, REGIST_CODE, SOP_CODE, GRADE_DATE)
    VALUES (V_GRADE_CODE, V_GRADE_SILGI, V_GRADE_PILGI, V_GRADE_CHUL, V_REGIST_CODE, V_SOP_CODE, SYSDATE);
    
    COMMIT;
    
    -- 중도탈락 예외발생
    EXCEPTION
        WHEN FAIL_ERROR
            THEN RAISE_APPLICATION_ERROR (-20004, '중도포기한 학생입니다.');
                ROLLBACK;
        WHEN OTHERS
            THEN ROLLBACK;
END;
 
--==>> Procedure PRC_SCORE_INSERT이(가) 컴파일되었습니다.


-- 학생 성적 수정(교수)
CREATE OR REPLACE PROCEDURE PRC_SCORE_UPDATE
( V_GRADE_CODE  IN TBL_GRADE.GRADE_CODE%TYPE
, V_GRADE_SILGI IN TBL_GRADE.GRADE_SILGI%TYPE
, V_GRADE_PILGI IN TBL_GRADE.GRADE_PILGI%TYPE
, V_GRADE_CHUL  IN TBL_GRADE.GRADE_CHUL%TYPE
)
IS
    V_SOP_CODE  TBL_SOPEN.SOP_CODE%TYPE;
    V_SOP_END   TBL_SOPEN.SOP_END%TYPE;
    DATE_OVER   EXCEPTION;
BEGIN

    SELECT SO.SOP_CODE, SO.SOP_END INTO V_SOP_CODE, V_SOP_END
    FROM TBL_SOPEN SO
        JOIN TBL_GRADE GR
        ON SO.SOP_CODE = GR.SOP_CODE
        WHERE GR.GRADE_CODE = V_GRADE_CODE;
        
    IF (V_SOP_END > SYSDATE)
        THEN RAISE DATE_OVER;
    END IF;

    UPDATE TBL_GRADE
    SET GRADE_SILGI = V_GRADE_SILGI, GRADE_PILGI = V_GRADE_PILGI, GRADE_CHUL = V_GRADE_CHUL
    WHERE GRADE_CODE = V_GRADE_CODE;
    
    COMMIT;
    
    EXCEPTION 
        WHEN DATE_OVER
            THEN RAISE_APPLICATION_ERROR(-20005, '성적 입력기간이 아닙니다.');
            ROLLBACK;
        WHEN OTHERS
            THEN ROLLBACK;

END;
--==>> Procedure PRC_SCORE_UPDATE이(가) 컴파일되었습니다.


-- 학생 성적 삭제 (교수)
CREATE OR REPLACE PROCEDURE PRC_SCORE_DELETE
( V_GRADE_CODE  IN TBL_GRADE.GRADE_CODE%TYPE
)
IS
BEGIN

    DELETE FROM TBL_GRADE
    WHERE GRADE_CODE = V_GRADE_CODE;
    
END;
--==>> Procedure PRC_SCORE_DELETE이(가) 컴파일되었습니다.


-- 과목 배정 교수자 변경(관리자)
CREATE OR REPLACE PROCEDURE PRC_SOP_PRO_UPDATE
( 
   V_SOP_CODE   IN TBL_SOPEN.SOP_CODE%TYPE
 , V_PROFESSOR_ID IN TBL_PRO.PROFESSOR_ID%TYPE
 )
 IS
    USER_DEFINE_ERROR EXCEPTION;
    V_COUNT   NUMBER;
 BEGIN
    
    SELECT COUNT(PROFESSOR_ID) INTO V_COUNT
    FROM TBL_PRO
    WHERE PROFESSOR_ID = V_PROFESSOR_ID;
    
    IF(V_COUNT = 0)
        THEN RAISE USER_DEFINE_ERROR;
    END IF;
    
    UPDATE TBL_SOPEN
    SET PROFESSOR_ID = V_PROFESSOR_ID
    WHERE SOP_CODE = V_SOP_CODE;
    
    COMMIT;
    
    EXCEPTION
        WHEN USER_DEFINE_ERROR
            THEN RAISE_APPLICATION_ERROR(-20003, '조회되는 ID가 없습니다');
            ROLLBACK;
        WHEN OTHERS
            THEN ROLLBACK;
 END;
--==>> Procedure PRC_SOP_PRO_UPDATE이(가) 컴파일되었습니다.


-- 과목 정보 입력, 수정, 삭제(관리자)
CREATE OR REPLACE PROCEDURE PRC_SOP_INSERT
( V_SOP_CODE        IN TBL_SOPEN.SOP_CODE%TYPE
, V_SUBJECT_NAME    IN TBL_SUBJECT.SUBJECT_NAME%TYPE
, V_SOP_START       IN TBL_SOPEN.SOP_START%TYPE
, V_SOP_END         IN TBL_SOPEN.SOP_END%TYPE
, V_PROFESSOR_ID    IN TBL_SOPEN.PROFESSOR_ID%TYPE
, V_COP_CODE        IN TBL_SOPEN.COP_CODE%TYPE
, V_SOP_SILGI       IN TBL_SOPEN.SOP_SILGI%TYPE
, V_SOP_PILGI       IN TBL_SOPEN.SOP_PILGI%TYPE
, V_SOP_CHUL        IN TBL_SOPEN.SOP_CHUL%TYPE
, V_BOOK_NAME       IN TBL_BOOK.BOOK_NAME%TYPE
, V_SOP_DATE        IN TBL_SOPEN.SOP_DATE%TYPE
)
IS
    V_SUBJECT_CODE  TBL_SOPEN.SUBJECT_CODE%TYPE;
    V_BOOK_CODE     TBL_SOPEN.BOOK_CODE%TYPE;
    V_COUNT         NUMBER;
    V_NUM           NUMBER;
    V2_COUNT        NUMBER;
    V2_NUM          NUMBER;
    
BEGIN
    
    -- 과목이름
    SELECT COUNT(SUBJECT_CODE) INTO V_COUNT
    FROM TBL_SUBJECT
    WHERE SUBJECT_NAME = V_SUBJECT_NAME;
    
    SELECT MAX(TO_NUMBER(SUBSTR(SUBJECT_CODE,2)))+1 INTO V_NUM
    FROM TBL_SUBJECT;
    
    V_SUBJECT_CODE := 'S' || TO_CHAR(V_NUM);
    
    IF (V_COUNT = 0)
        THEN INSERT INTO TBL_SUBJECT(SUBJECT_CODE, SUBJECT_NAME)
        VALUES(V_SUBJECT_CODE,V_SUBJECT_NAME);
    END IF;
    
    -- 책이름
    SELECT COUNT(BOOK_CODE) INTO V2_COUNT
    FROM TBL_BOOK
    WHERE BOOK_NAME = V_BOOK_NAME;
    
    SELECT MAX(TO_NUMBER(SUBSTR(BOOK_CODE,5)))+1 INTO V2_NUM
    FROM TBL_BOOK;
    
    V_BOOK_CODE := 'BOOK' || TO_CHAR(V2_NUM);
    
    IF (V2_COUNT = 0)
        THEN INSERT INTO TBL_BOOK(BOOK_CODE, BOOK_NAME)
        VALUES(V_BOOK_CODE,V_BOOK_NAME);
    END IF;
    
    SELECT SUBJECT_CODE INTO V_SUBJECT_CODE
    FROM TBL_SUBJECT
    WHERE SUBJECT_NAME = V_SUBJECT_NAME;
    
    SELECT BOOK_CODE INTO V_BOOK_CODE
    FROM TBL_BOOK
    WHERE BOOK_NAME = V_BOOK_NAME;
    
    INSERT INTO TBL_SOPEN(SOP_CODE, SUBJECT_CODE, SOP_START, SOP_END, PROFESSOR_ID, COP_CODE , SOP_SILGI, SOP_PILGI, SOP_CHUL, BOOK_CODE, SOP_DATE)
    VALUES(V_SOP_CODE, V_SUBJECT_CODE, V_SOP_START, V_SOP_END, V_PROFESSOR_ID, 
            V_COP_CODE, V_SOP_SILGI, V_SOP_PILGI, V_SOP_CHUL, V_BOOK_CODE, V_SOP_DATE);
    
END;
--==>> Procedure PRC_SOP_INSERT이(가) 컴파일되었습니다.

-- 과목 업데이트는 SQL 파일에서 쿼리문으로...

-- 과목 삭제 프로시저
CREATE OR REPLACE PROCEDURE PRC_SOP_DELETE
(
 V_SOP_CODE IN TBL_SOPEN.SOP_CODE%TYPE
)
IS
    V_COUNT             NUMBER;
    USER_DEFINE_ERROR   EXCEPTION;
    DATE_ERROR          EXCEPTION;
    
    V_SOP_START TBL_SOPEN.SOP_START%TYPE;
    V_SOP_END   TBL_SOPEN.SOP_END%TYPE;
    
BEGIN
    
    SELECT COUNT(SOP_CODE) INTO V_COUNT
    FROM TBL_GRADE
    WHERE SOP_CODE = V_SOP_CODE;
    
    IF (V_COUNT > 0 )
        THEN RAISE USER_DEFINE_ERROR;
    END IF;
    
    SELECT SOP_START, SOP_END INTO V_SOP_START, V_SOP_END
    FROM TBL_SOPEN
    WHERE SOP_CODE = V_SOP_CODE;
    
    IF (V_SOP_START < SYSDATE AND V_SOP_END > SYSDATE)
        THEN RAISE DATE_ERROR;
    END IF;
    
    DELETE FROM TBL_SOPEN
    WHERE SOP_CODE = V_SOP_CODE;
    
    COMMIT;
    
    EXCEPTION
        WHEN USER_DEFINE_ERROR
            THEN RAISE_APPLICATION_ERROR(-20006, '이미 입력된 성적이 있습니다.');
            ROLLBACK;
        WHEN DATE_ERROR
            THEN RAISE_APPLICATION_ERROR(-20007, '과목이 진행중입니다.');
            ROLLBACK;
        WHEN OTHERS
            THEN ROLLBACK;
    
END;
--==>> Procedure PRC_SOP_DELETE이(가) 컴파일되었습니다.


-- 과정 정보 입력
CREATE OR REPLACE PROCEDURE PRC_COP_INSERT
(
    V_COURSE_NAME   IN TBL_COURSE.COURSE_NAME%TYPE
,   V_COP_START     IN TBL_COPEN.COP_START%TYPE
,   V_COP_END       IN TBL_COPEN.COP_END%TYPE
,   V_ROOM_NAME     IN TBL_ROOM.ROOM_NAME%TYPE
,   V_COP_DATE      IN TBL_COPEN.COP_DATE%TYPE
)
IS
    V_COP_CODE      TBL_COPEN.COP_CODE%TYPE;
    V_COURSE_CODE   TBL_COPEN.COURSE_CODE%TYPE;
    V_ROOM_CODE     TBL_COPEN.ROOM_CODE%TYPE;
    V_COUNT         NUMBER;
    V_NUM           NUMBER;
    V2_COUNT        NUMBER;
    V2_NUM          NUMBER;
    V_ROOM_START    TBL_COPEN.COP_START%TYPE;
    V_ROOM_END      TBL_COPEN.COP_END%TYPE;
    
    USE_ROOM       EXCEPTION;
    
BEGIN
    
    SELECT COP_START, COP_END INTO V_ROOM_START, V_ROOM_END
    FROM TBL_COPEN
    WHERE ROOM_CODE = V_ROOM_CODE;
    
    IF((V_ROOM_START >= V_COP_START AND V_ROOM_END <= V_COP_END)
        OR V_ROOM_END < V_COP_START OR V_ROOM_START < V_ROOM_END)
        THEN RAISE USE_ROOM;
    END IF;
    
    -- 과정이름
    SELECT COUNT(COURSE_CODE) INTO V_COUNT
    FROM TBL_COURSE
    WHERE COURSE_NAME = V_COURSE_NAME;
    
    SELECT MAX(TO_NUMBER(SUBSTR(COURSE_CODE,7)))+1 INTO V_NUM
    FROM TBL_COURSE;
    
    V_COURSE_CODE := 'COURSE' || TO_CHAR(V_NUM);
    
    IF (V_COUNT = 0)
        THEN INSERT INTO TBL_COURSE(COURSE_CODE, COURSE_NAME)
        VALUES(V_COURSE_CODE,V_COURSE_NAME);
    END IF;
    
    -- 책이름
    SELECT COUNT(ROOM_CODE) INTO V2_COUNT
    FROM TBL_ROOM
    WHERE ROOM_NAME = V_ROOM_NAME;
    
    SELECT MAX(TO_NUMBER(SUBSTR(ROOM_CODE,5)))+1 INTO V2_NUM
    FROM TBL_ROOM;
    
    V_ROOM_CODE := 'ROOM' || TO_CHAR(V2_NUM);
    
    IF (V2_COUNT = 0)
        THEN INSERT INTO TBL_ROOM(ROOM_CODE, ROOM_NAME)
        VALUES(V_ROOM_CODE,V_ROOM_NAME);
    END IF;
    
    SELECT COURSE_CODE INTO V_COURSE_CODE
    FROM TBL_COURSE
    WHERE COURSE_NAME = V_COURSE_NAME;
    
    SELECT ROOM_CODE INTO V_ROOM_CODE
    FROM TBL_ROOM
    WHERE ROOM_NAME = V_ROOM_NAME;
    
    INSERT INTO TBL_COPEN(COP_CODE, COURSE_CODE, COP_START, COP_END, ROOM_CODE, COP_DATE)
    VALUES(V_COP_CODE, V_COURSE_CODE, V_COP_START, V_COP_END, V_ROOM_CODE, V_COP_DATE);
    
    COMMIT;
    
    EXCEPTION 
        WHEN USE_ROOM
            THEN RAISE_APPLICATION_ERROR(-20012, '사용중인 강의실입니다.');
                 ROLLBACK;
        WHEN OTHERS
            THEN ROLLBACK;    
END;
--==>> Procedure PRC_COP_INSERT이(가) 컴파일되었습니다.


-- 과정 삭제(관리자)

CREATE OR REPLACE PROCEDURE PRC_COP_DELETE
(
 V_COP_CODE IN TBL_COPEN.COP_CODE%TYPE
)
IS
    V_COUNT             NUMBER;
    V2_COUNT            NUMBER;
    USER_DEFINE_ERROR   EXCEPTION;
    DATE_ERROR          EXCEPTION;
    SOP_ERROR           EXCEPTION;
    
    V_COP_START TBL_COPEN.COP_START%TYPE;
    V_COP_END   TBL_COPEN.COP_END%TYPE;
    
BEGIN
    
    SELECT COUNT(COP_CODE) INTO V_COUNT
    FROM TBL_REGIST
    WHERE COP_CODE = V_COP_CODE;
    
    SELECT COUNT(COP_CODE) INTO V2_COUNT
    FROM TBL_SOPEN
    WHERE COP_CODE = V_COP_CODE;
    
    IF (V_COUNT > 0 )
        THEN RAISE USER_DEFINE_ERROR;
    ELSIF (V2_COUNT > 0 )
        THEN RAISE SOP_ERROR;
    END IF;
    
    
    -- 날짜
    SELECT COP_START, COP_END INTO V_COP_START, V_COP_END
    FROM TBL_COPEN
    WHERE COP_CODE = V_COP_CODE;
    
    IF (V_COP_START < SYSDATE AND V_COP_END > SYSDATE)
        THEN RAISE DATE_ERROR;
    END IF;
    
    DELETE FROM TBL_COPEN
    WHERE COP_CODE = V_COP_CODE;
    
    COMMIT;
    
    EXCEPTION
        WHEN USER_DEFINE_ERROR
            THEN RAISE_APPLICATION_ERROR(-20008, '해당 과정에 이미 수강신청한 학생이 있습니다.');
            ROLLBACK;
        WHEN DATE_ERROR
            THEN RAISE_APPLICATION_ERROR(-20009, '과정이 진행중입니다.');
            ROLLBACK;
        WHEN SOP_ERROR
            THEN RAISE_APPLICATION_ERROR(-20010, '해당 과정에 포함된 과목이 있습니다.');
            ROLLBACK;
        WHEN OTHERS
            THEN ROLLBACK;
END;
--==>> Procedure PRC_COP_DELETE이(가) 컴파일되었습니다.


-- 도중탈락 테이블 추가, 명단 제외

CREATE OR REPLACE PROCEDURE PRC_FAIL_INSERT
(
    V_REGIST_CODE       IN TBL_FAIL.REGIST_CODE%TYPE
,   V_FAIL_DATE         IN TBL_FAIL.FAIL_DATE%TYPE
,   V_REASON_DROPOUT    IN TBL_REASON.REASON_DROPOUT%TYPE
,   V_SOP_CODE          IN TBL_SOPEN.SOP_CODE%TYPE
)
IS
    V_FAIL_CODE         TBL_FAIL.FAIL_CODE%TYPE;
    V_REASON_CODE       TBL_REASON.REASON_CODE%TYPE;
    V_NUM               NUMBER;
    V_COUNT             NUMBER;
    
    USER_DEFINE_ERROR   EXCEPTION;
BEGIN
    
    SELECT COUNT(SOP_CODE) INTO V_COUNT
    FROM TBL_SOPEN
    WHERE SOP_CODE = V_SOP_CODE;
    
    IF(V_COUNT = 0 )
        THEN RAISE USER_DEFINE_ERROR;
    END IF;
    
    SELECT REASON_CODE INTO V_REASON_CODE
    FROM TBL_REASON
    WHERE REASON_DROPOUT = V_REASON_DROPOUT;
    
    SELECT MAX(TO_NUMBER(SUBSTR(FAIL_CODE,5)))+1 INTO V_NUM
    FROM TBL_FAIL;
    
    V_FAIL_CODE := 'FAIL' || TO_CHAR(V_NUM);
    
    DELETE FROM TBL_GRADE
    WHERE SOP_CODE = V_SOP_CODE AND REGIST_CODE = V_REGIST_CODE;
    
    INSERT INTO TBL_FAIL(FAIL_CODE, REGIST_CODE, FAIL_DATE, REASON_CODE)
    VALUES(V_FAIL_CODE, V_REGIST_CODE, V_FAIL_DATE, V_REASON_CODE);
    
    COMMIT;
    
    EXCEPTION
        WHEN USER_DEFINE_ERROR
            THEN RAISE_APPLICATION_ERROR(-20011, '해당 과목이 존재하지 않습니다.');
            ROLLBACK;
        WHEN OTHERS
            THEN ROLLBACK;
    
END;
--==>> Procedure PRC_FAIL_INSERT이(가) 컴파일되었습니다.

-- 과목 배점 부여 (교수)

    
    
END;

-- 학생 성적 입력 프로시저 (교수)===============================================

CREATE OR REPLACE PROCEDURE PRC_SCORE_INSERT
( V_STUDENT_ID      IN TBL_STUDENT.STUDENT_ID%TYPE
, V_SUBJECT_NAME    IN TBL_SUBJECT.SUBJECT_NAME%TYPE
, V_GRADE_SILGI     IN TBL_GRADE.GRADE_SILGI%TYPE
, V_GRADE_PILGI     IN TBL_GRADE.GRADE_PILGI%TYPE
, V_GRADE_CHUL      IN TBL_GRADE.GRADE_CHUL%TYPE
, V_GRADE_DATE      IN TBL_GRADE.GRADE_DATE%TYPE
, V_PRO_ID          IN TBL_PRO.PROFESSOR_ID%TYPE
)
IS
    -- 과목코드 V
    V_GRADE_CODE    TBL_GRADE.GRADE_CODE%TYPE;
    V_SUBJECT_CODE  TBL_SUBJECT.SUBJECT_CODE%TYPE;
    V_COUNT         NUMBER;
    V_NUM           NUMBER;
    V_SOP_CODE      TBL_SOPEN.SOP_CODE%TYPE;
    V_REGIST_CODE   TBL_REGIST.REGIST_CODE%TYPE;
    
    -- 중도탈락 예외처리 변수
    FAIL_ERROR EXCEPTION;
BEGIN
    -- SELECT V _과목코드
    
    SELECT COUNT(*) INTO V_COUNT
    FROM TBL_FAIL FA
        JOIN TBL_REGIST RG
        ON FA.REGIST_CODE = RG.REGIST_CODE
    WHERE RG.STUDENT_ID = V_STUDENT_ID;
    
    IF (V_COUNT >0)
        THEN RAISE FAIL_ERROR;
    END IF;
    
    SELECT MAX(TO_NUMBER(SUBSTR(GRADE_CODE,6)))+1 INTO V_NUM
    FROM TBL_GRADE;
    
    V_GRADE_CODE := 'GRADE' || TO_CHAR(V_NUM);
    
    SELECT SOP_CODE INTO V_SOP_CODE
    FROM TBL_SOPEN SO JOIN TBL_SUBJECT SJ
        ON SO.SUBJECT_CODE = SJ.SUBJECT_CODE
        WHERE SJ.SUBJECT_NAME = V_SUBJECT_NAME
        AND SO.PROFESSOR_ID = V_PRO_ID;
    
    SELECT REGIST_CODE INTO V_REGIST_CODE
    FROM TBL_REGIST RG
        JOIN TBL_STUDENT SD
        ON RG.STUDENT_ID = SD.STUDENT_ID
    WHERE SD.STUDENT_ID = V_STUDENT_ID;
    
    -- SELECT V_과목코드
    INSERT INTO TBL_GRADE(GRADE_CODE, GRADE_SILGI, GRADE_PILGI, GRADE_CHUL, REGIST_CODE, SOP_CODE, GRADE_DATE)
    VALUES (V_GRADE_CODE, V_GRADE_SILGI, V_GRADE_PILGI, V_GRADE_CHUL, V_REGIST_CODE, V_SOP_CODE, SYSDATE);
    
    COMMIT;
    
    -- 중도탈락 예외발생
    EXCEPTION
        WHEN FAIL_ERROR
            THEN RAISE_APPLICATION_ERROR (-20004, '중도포기한 학생입니다.');
                ROLLBACK;
        WHEN OTHERS
            THEN ROLLBACK;
END;


-- 학생 성적 수정, 삭제 (교수)

CREATE OR REPLACE PROCEDURE PRC_SCORE_UPDATE
( V_GRADE_CODE  IN TBL_GRADE.GRADE_CODE%TYPE
, V_GRADE_SILGI IN TBL_GRADE.GRADE_SILGI%TYPE
, V_GRADE_PILGI IN TBL_GRADE.GRADE_PILGI%TYPE
, V_GRADE_CHUL  IN TBL_GRADE.GRADE_CHUL%TYPE
)
IS
    V_SOP_CODE  TBL_SOPEN.SOP_CODE%TYPE;
    V_SOP_END   TBL_SOPEN.SOP_END%TYPE;
    DATE_OVER   EXCEPTION;
BEGIN

    SELECT SO.SOP_CODE, SO.SOP_END INTO V_SOP_CODE, V_SOP_END
    FROM TBL_SOPEN SO
        JOIN TBL_GRADE GR
        ON SO.SOP_CODE = GR.SOP_CODE
        WHERE GR.GRADE_CODE = V_GRADE_CODE;
        
    IF (V_SOP_END > SYSDATE)
        THEN RAISE DATE_OVER;
    END IF;

    UPDATE TBL_GRADE
    SET GRADE_SILGI = V_GRADE_SILGI, GRADE_PILGI = V_GRADE_PILGI, GRADE_CHUL = V_GRADE_CHUL
    WHERE GRADE_CODE = V_GRADE_CODE;
    
    COMMIT;
    
    EXCEPTION 
        WHEN DATE_OVER
            THEN RAISE_APPLICATION_ERROR(-20005, '성적 입력기간이 아닙니다.');
            ROLLBACK;
        WHEN OTHERS
            THEN ROLLBACK;

END;
--==>> Procedure PRC_SCORE_UPDATE이(가) 컴파일되었습니다.

-- 학생 성적 삭제
CREATE OR REPLACE PROCEDURE PRC_SCORE_DELETE
( V_GRADE_CODE  IN TBL_GRADE.GRADE_CODE%TYPE
)
IS
BEGIN

    DELETE FROM TBL_GRADE
    WHERE GRADE_CODE = V_GRADE_CODE;
    
END;
--==>> Procedure PRC_SCORE_DELETE이(가) 컴파일되었습니다.



-- 트리거 ======================================================================

CREATE OR REPLACE TRIGGER TRG_SOPEN_DELETE  
        BEFORE
        DELETE ON TBL_PRO
        FOR EACH ROW
BEGIN
    DELETE
    FROM TBL_SOPEN
    WHERE PROFESSOR_ID = :OLD.PROFESSOR_ID; 
END;
--==>> Trigger TRG_SOPEN_DELETE이(가) 컴파일되었습니다.


-- 과목개설삭제 -> 성적삭제
CREATE OR REPLACE TRIGGER TRG_GRADE_DELETE  
        BEFORE
        DELETE ON TBL_SOPEN
        FOR EACH ROW
BEGIN
    DELETE
    FROM TBL_GRADE
    WHERE SOP_CODE = :OLD.SOP_CODE; 
END;
--==>> Trigger TRG_GRADE_DELETE이(가) 컴파일되었습니다.


-- 학생 삭제 -> 수강신청삭제
CREATE OR REPLACE TRIGGER TRG_REGIST_DELETE  
        BEFORE
        DELETE ON TBL_STUDENT
        FOR EACH ROW
BEGIN
    DELETE
    FROM TBL_REGIST
    WHERE STUDENT_ID = :OLD.STUDENT_ID; 
END;
--==>> Trigger TRG_REGIST_DELETE이(가) 컴파일되었습니다.


-- 수강신청삭제 -> 도중탈락삭제, 성적삭제
CREATE OR REPLACE TRIGGER TRG_FAIL_GRADE_DELETE  
        BEFORE
        DELETE ON TBL_REGIST
        FOR EACH ROW
BEGIN
    DELETE
    FROM TBL_FAIL
    WHERE REGIST_CODE = :OLD.REGIST_CODE; 
    
    DELETE
    FROM TBL_GRADE
    WHERE REGIST_CODE = :OLD.REGIST_CODE;
END;
--==>>Trigger TRG_GRADE_DELETE이(가) 컴파일되었습니다.



-- 과정개설삭제 -> 과목개설삭제, 수강신청삭제 -> 도중탈락삭제
CREATE OR REPLACE TRIGGER TRG_SOPEN_REGIST_DELETE  
        BEFORE
        DELETE ON TBL_COPEN
        FOR EACH ROW
BEGIN
    DELETE
    FROM TBL_SOPEN
    WHERE COP_CODE = :OLD.COP_CODE; 
    
    DELETE
    FROM TBL_REGIST
    WHERE COP_CODE = :OLD.COP_CODE;
END;
--==>> Trigger TRG_SOPEN_REGIST_DELETE이(가) 컴파일되었습니다.


CREATE OR REPLACE TRIGGER TRG_GRADE_DELETE  
        BEFORE
        DELETE ON TBL_SOPEN
        FOR EACH ROW
BEGIN
    DELETE
    FROM TBL_GRADE
    WHERE SOP_CODE = :OLD.SOP_CODE; 
END;
--==>> Trigger TRG_GRADE_DELETE이(가) 컴파일되었습니다.


